// Code generated by MockGen. DO NOT EDIT.
// Source: dependecies.go

// Package product is a generated GoMock package.
package product

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockcommand is a mock of command interface.
type Mockcommand struct {
	ctrl     *gomock.Controller
	recorder *MockcommandMockRecorder
}

// MockcommandMockRecorder is the mock recorder for Mockcommand.
type MockcommandMockRecorder struct {
	mock *Mockcommand
}

// NewMockcommand creates a new mock instance.
func NewMockcommand(ctrl *gomock.Controller) *Mockcommand {
	mock := &Mockcommand{ctrl: ctrl}
	mock.recorder = &MockcommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcommand) EXPECT() *MockcommandMockRecorder {
	return m.recorder
}

// Alias mocks base method.
func (m *Mockcommand) Alias() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias")
	ret0, _ := ret[0].(string)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockcommandMockRecorder) Alias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*Mockcommand)(nil).Alias))
}
