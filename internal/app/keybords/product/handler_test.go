package product

import (
	"context"
	"testing"

	"github.com/samber/lo"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/IASamoylov/tg_calories_observer/internal/domain/entity/dto"

	"github.com/golang/mock/gomock"

	"github.com/stretchr/testify/assert"
)

var user = dto.NewUser(100500, "test", "", "", "")

func TestAlias(t *testing.T) {
	t.Parallel()

	t.Run("–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫–µ", func(t *testing.T) {
		t.Parallel()

		button := NewButton(nil)

		assert.Equal(t, "üçá–ü—Ä–æ–¥—É–∫—Ç—ã", button.Text())
	})
}

func TestExecute(t *testing.T) {
	t.Parallel()

	t.Run("–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å", func(t *testing.T) {
		t.Parallel()

		btn := NewMockinlineButton(gomock.NewController(t))
		btn.EXPECT().Text().Return("–î–æ–±–∞–≤–∏—Ç—å")
		btn.EXPECT().Callback().Return("/add")
		btn.EXPECT().Text().Return("–£–¥–∞–ª–∏—Ç—å")
		btn.EXPECT().Callback().Return("/remove")
		btn.EXPECT().Text().Return("–ò–∑–º–µ–Ω–∏—Ç—å")
		btn.EXPECT().Callback().Return("/edit")

		button := NewButton(btn, btn, btn)

		msg, err := button.Execute(context.Background(), user)

		expectedMessage := tgbotapi.NewMessage(user.TelegramID(), "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?")
		expectedMessage.ReplyMarkup = tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{
					{Text: "–î–æ–±–∞–≤–∏—Ç—å", CallbackData: lo.ToPtr("/add")},
					{Text: "–£–¥–∞–ª–∏—Ç—å", CallbackData: lo.ToPtr("/remove")},
				},
				{
					{Text: "–ò–∑–º–µ–Ω–∏—Ç—å", CallbackData: lo.ToPtr("/edit")},
				},
			},
		}

		assert.NoError(t, err)
		assert.Equal(t, expectedMessage, msg)
	})
}
