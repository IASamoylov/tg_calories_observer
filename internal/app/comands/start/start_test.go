package start

import (
	"context"
	"fmt"
	"testing"

	mockstelegram "github.com/IASamoylov/tg_calories_observer/internal/utils/types"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/IASamoylov/tg_calories_observer/internal/domain/entity/dto"

	"go.uber.org/mock/gomock"

	"github.com/stretchr/testify/assert"
)

const expectedText = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, @test! –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –∞–≥–µ–Ω—Ç üç©üç©5 –∫–∞–ª–ª. " +
	"–ú–æ—è –º–∏—Å—Å–∏—è - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ —Å—É—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π. " +
	"–Ø –∏—â—É '–∑–ª–æ–¥–µ–µ–≤' –≤—Ä–æ–¥–µ –Ω–µ–ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üçüüç´, –Ω–æ –±–µ–∑ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏ —è –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å. " +
	"–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å –≤—Å–µ '–ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ' –ø—Ä–æ–¥—É–∫—Ç—ã üçé. \n\n" +
	"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —è —É–º–µ—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /help."

var user = dto.NewUser(100500, "test", "", "", "")
var me = tgbotapi.User{ID: 35125}

func beforeTest(t *testing.T) (*Handler, *MockkeyboardButton, *mockstelegram.MockTelegram) {
	mockHelpCommand := NewMockhelpCommand(gomock.NewController(t))
	mockHelpCommand.EXPECT().Alias().Return("help").AnyTimes()

	mockKeyboardButton := NewMockkeyboardButton(gomock.NewController(t))
	mockTelegram := mockstelegram.NewMockTelegram(gomock.NewController(t))

	return NewHandler(mockHelpCommand, mockTelegram), mockKeyboardButton, mockTelegram
}

func TestExecute(t *testing.T) {
	t.Parallel()

	t.Run("–∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞", func(t *testing.T) {
		t.Parallel()

		handler, _, mockTelegram := beforeTest(t)
		fileID := "cb196684-d6ec-4fb1-a5bf-c87e39193514"
		expectedPhoto := tgbotapi.NewPhoto(user.TelegramID(), tgbotapi.FileID(fileID))
		expectedPhoto.Caption = expectedText

		mockTelegram.EXPECT().GetMe().Return(me, nil)
		mockTelegram.EXPECT().
			GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{UserID: me.ID, Limit: 1}).
			Return(tgbotapi.UserProfilePhotos{Photos: [][]tgbotapi.PhotoSize{{{FileID: fileID}}}}, nil).
			Times(1)

		msg, err := handler.Execute(context.Background(), user, "")
		assert.NoError(t, err)
		assert.Equal(t, expectedPhoto, msg)

		t.Run("–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", func(t *testing.T) {
			msg, err = handler.Execute(context.Background(), user, "")
			assert.NoError(t, err)

			assert.Equal(t, expectedPhoto, msg)
		})
	})

	t.Run("–µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, —Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", func(t *testing.T) {
		t.Parallel()

		t.Run("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞", func(t *testing.T) {
			t.Parallel()

			handler, _, mockTelegram := beforeTest(t)
			expectedMessage := tgbotapi.NewMessage(user.TelegramID(), expectedText)

			mockTelegram.EXPECT().GetMe().Return(tgbotapi.User{}, fmt.Errorf("GetMe error"))
			mockTelegram.EXPECT().GetUserProfilePhotos(gomock.Any()).Times(0)

			msg, err := handler.Execute(context.Background(), user, "")
			assert.NoError(t, err)
			assert.Equal(t, expectedMessage, msg)
		})

		t.Run("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞", func(t *testing.T) {
			t.Parallel()

			handler, _, mockTelegram := beforeTest(t)
			expectedMessage := tgbotapi.NewMessage(user.TelegramID(), expectedText)

			mockTelegram.EXPECT().GetMe().Return(me, nil)
			mockTelegram.EXPECT().
				GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{UserID: me.ID, Limit: 1}).
				Return(tgbotapi.UserProfilePhotos{}, fmt.Errorf("GetUserProfilePhotos error"))

			msg, err := handler.Execute(context.Background(), user, "")

			assert.NoError(t, err)
			assert.Equal(t, expectedMessage, msg)
		})

		t.Run("—É –ø—Ä–æ—Ñ–∏–ª–∏ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç —Ñ–æ—Ç–æ", func(t *testing.T) {
			t.Parallel()

			tcs := []struct {
				name  string
				photo [][]tgbotapi.PhotoSize
			}{
				{name: "nil", photo: nil},
				{name: "empty", photo: [][]tgbotapi.PhotoSize{}},
				{name: "–æ—Ç—Å—É—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞", photo: [][]tgbotapi.PhotoSize{{}}},
			}

			for _, tc := range tcs {
				tc := tc

				t.Run(tc.name, func(t *testing.T) {
					t.Parallel()

					handler, _, mockTelegram := beforeTest(t)
					expectedMessage := tgbotapi.NewMessage(user.TelegramID(), expectedText)

					mockTelegram.EXPECT().GetMe().Return(me, nil)
					mockTelegram.EXPECT().
						GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{UserID: me.ID, Limit: 1}).
						Return(tgbotapi.UserProfilePhotos{Photos: tc.photo}, nil)

					msg, err := handler.Execute(context.Background(), user, "")

					assert.NoError(t, err)
					assert.Equal(t, expectedMessage, msg)
				})
			}
		})
	})
}

func TestWithKeyboardButton(t *testing.T) {
	t.Parallel()

	expectedText := expectedText + help
	expectedProductBtn := tgbotapi.KeyboardButton{Text: "–ü—Ä–æ–¥—É–∫—Ç—ã"}
	expectedReportBrn := tgbotapi.KeyboardButton{Text: "–û—Ç—á–µ—Ç—ã"}
	expectedSettingBtn := tgbotapi.KeyboardButton{Text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}
	expectedRow1 := []tgbotapi.KeyboardButton{expectedProductBtn, expectedReportBrn}
	expectedRow2 := []tgbotapi.KeyboardButton{expectedSettingBtn}
	expectedKeyboard := tgbotapi.ReplyKeyboardMarkup{
		OneTimeKeyboard: true,
		ResizeKeyboard:  true,
		Keyboard:        [][]tgbotapi.KeyboardButton{expectedRow1, expectedRow2},
	}

	t.Run("–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—É—Ç—É—Ä–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º", func(t *testing.T) {
		t.Parallel()

		t.Run("—Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç–≤–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞", func(t *testing.T) {
			t.Parallel()
			handler, mockKeyboardButton, mockTelegram := beforeTest(t)

			expectedMessage := tgbotapi.NewMessage(user.TelegramID(), expectedText)
			expectedMessage.ReplyMarkup = expectedKeyboard

			mockTelegram.EXPECT().GetMe().Return(me, nil)
			mockTelegram.EXPECT().
				GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{UserID: me.ID, Limit: 1}).
				Return(tgbotapi.UserProfilePhotos{}, fmt.Errorf("GetUserProfilePhotos error"))

			mockKeyboardButton.EXPECT().Text().Return(expectedProductBtn.Text)
			mockKeyboardButton.EXPECT().Text().Return(expectedReportBrn.Text)
			mockKeyboardButton.EXPECT().Text().Return(expectedSettingBtn.Text)
			handler.WithKeyboardButton(mockKeyboardButton, mockKeyboardButton, mockKeyboardButton)

			msg, err := handler.Execute(context.Background(), user, "")
			assert.NoError(t, err)
			assert.Equal(t, expectedMessage, msg)
		})

		t.Run("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π", func(t *testing.T) {
			handler, mockKeyboardButton, mockTelegram := beforeTest(t)
			fileID := "cb196684-d6ec-4fb1-a5bf-c87e39193514"
			expectedPhoto := tgbotapi.NewPhoto(user.TelegramID(), tgbotapi.FileID(fileID))
			expectedPhoto.Caption = expectedText
			expectedPhoto.ReplyMarkup = expectedKeyboard

			mockTelegram.EXPECT().GetMe().Return(me, nil)
			mockTelegram.EXPECT().
				GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{UserID: me.ID, Limit: 1}).
				Return(tgbotapi.UserProfilePhotos{Photos: [][]tgbotapi.PhotoSize{{{FileID: fileID}}}}, nil)

			mockKeyboardButton.EXPECT().Text().Return(expectedProductBtn.Text)
			mockKeyboardButton.EXPECT().Text().Return(expectedReportBrn.Text)
			mockKeyboardButton.EXPECT().Text().Return(expectedSettingBtn.Text)
			handler.WithKeyboardButton(mockKeyboardButton, mockKeyboardButton, mockKeyboardButton)

			msg, err := handler.Execute(context.Background(), user, "")

			assert.NoError(t, err)
			assert.Equal(t, expectedPhoto, msg)
		})
	})
}

func TestAlias(t *testing.T) {
	t.Parallel()

	t.Run("–≤–æ–∑–≤—Ä—â–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", func(t *testing.T) {
		handler := NewHandler(nil, nil)

		assert.Equal(t, "start", handler.Alias())
	})
}

func TestDescription(t *testing.T) {
	t.Parallel()

	t.Run("–≤–æ–∑–≤—Ä—â–∞–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", func(t *testing.T) {
		handler := NewHandler(nil, nil)

		assert.Equal(t, "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Å—Ç–∏–≤–∏–µ", handler.Description())
	})
}
