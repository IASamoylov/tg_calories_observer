// Code generated by MockGen. DO NOT EDIT.
// Source: dependecies.go

// Package start is a generated GoMock package.
package start

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhelpCommand is a mock of helpCommand interface.
type MockhelpCommand struct {
	ctrl     *gomock.Controller
	recorder *MockhelpCommandMockRecorder
}

// MockhelpCommandMockRecorder is the mock recorder for MockhelpCommand.
type MockhelpCommandMockRecorder struct {
	mock *MockhelpCommand
}

// NewMockhelpCommand creates a new mock instance.
func NewMockhelpCommand(ctrl *gomock.Controller) *MockhelpCommand {
	mock := &MockhelpCommand{ctrl: ctrl}
	mock.recorder = &MockhelpCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhelpCommand) EXPECT() *MockhelpCommandMockRecorder {
	return m.recorder
}

// Alias mocks base method.
func (m *MockhelpCommand) Alias() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias")
	ret0, _ := ret[0].(string)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockhelpCommandMockRecorder) Alias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*MockhelpCommand)(nil).Alias))
}

// MockkeyboardButton is a mock of keyboardButton interface.
type MockkeyboardButton struct {
	ctrl     *gomock.Controller
	recorder *MockkeyboardButtonMockRecorder
}

// MockkeyboardButtonMockRecorder is the mock recorder for MockkeyboardButton.
type MockkeyboardButtonMockRecorder struct {
	mock *MockkeyboardButton
}

// NewMockkeyboardButton creates a new mock instance.
func NewMockkeyboardButton(ctrl *gomock.Controller) *MockkeyboardButton {
	mock := &MockkeyboardButton{ctrl: ctrl}
	mock.recorder = &MockkeyboardButtonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeyboardButton) EXPECT() *MockkeyboardButtonMockRecorder {
	return m.recorder
}

// Text mocks base method.
func (m *MockkeyboardButton) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockkeyboardButtonMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockkeyboardButton)(nil).Text))
}
