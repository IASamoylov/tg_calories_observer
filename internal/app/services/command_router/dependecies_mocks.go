// Code generated by MockGen. DO NOT EDIT.
// Source: dependecies.go

// Package command_router is a generated GoMock package.
package commandrouter

import (
	context "context"
	reflect "reflect"

	dto "github.com/IASamoylov/tg_calories_observer/internal/domain/entity/dto"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockuserStorage) Upsert(ctx context.Context, user dto.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockuserStorageMockRecorder) Upsert(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockuserStorage)(nil).Upsert), ctx, user)
}

// Mocktelegram is a mock of telegram interface.
type Mocktelegram struct {
	ctrl     *gomock.Controller
	recorder *MocktelegramMockRecorder
}

// MocktelegramMockRecorder is the mock recorder for Mocktelegram.
type MocktelegramMockRecorder struct {
	mock *Mocktelegram
}

// NewMocktelegram creates a new mock instance.
func NewMocktelegram(ctrl *gomock.Controller) *Mocktelegram {
	mock := &Mocktelegram{ctrl: ctrl}
	mock.recorder = &MocktelegramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktelegram) EXPECT() *MocktelegramMockRecorder {
	return m.recorder
}

// InitMenu mocks base method.
func (m *Mocktelegram) InitMenu(commands []tgbotapi.BotCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMenu", commands)
}

// InitMenu indicates an expected call of InitMenu.
func (mr *MocktelegramMockRecorder) InitMenu(commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMenu", reflect.TypeOf((*Mocktelegram)(nil).InitMenu), commands)
}

// Send mocks base method.
func (m *Mocktelegram) Send(c tgbotapi.Chattable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", c)
}

// Send indicates an expected call of Send.
func (mr *MocktelegramMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mocktelegram)(nil).Send), c)
}

// SendErr mocks base method.
func (m *Mocktelegram) SendErr(receiver int64, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendErr", receiver, err)
}

// SendErr indicates an expected call of SendErr.
func (mr *MocktelegramMockRecorder) SendErr(receiver, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErr", reflect.TypeOf((*Mocktelegram)(nil).SendErr), receiver, err)
}

// MockcommandRouterHandler is a mock of commandRouterHandler interface.
type MockcommandRouterHandler struct {
	ctrl     *gomock.Controller
	recorder *MockcommandRouterHandlerMockRecorder
}

// MockcommandRouterHandlerMockRecorder is the mock recorder for MockcommandRouterHandler.
type MockcommandRouterHandlerMockRecorder struct {
	mock *MockcommandRouterHandler
}

// NewMockcommandRouterHandler creates a new mock instance.
func NewMockcommandRouterHandler(ctrl *gomock.Controller) *MockcommandRouterHandler {
	mock := &MockcommandRouterHandler{ctrl: ctrl}
	mock.recorder = &MockcommandRouterHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommandRouterHandler) EXPECT() *MockcommandRouterHandlerMockRecorder {
	return m.recorder
}

// Alias mocks base method.
func (m *MockcommandRouterHandler) Alias() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias")
	ret0, _ := ret[0].(string)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *MockcommandRouterHandlerMockRecorder) Alias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*MockcommandRouterHandler)(nil).Alias))
}

// Description mocks base method.
func (m *MockcommandRouterHandler) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockcommandRouterHandlerMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockcommandRouterHandler)(nil).Description))
}

// Execute mocks base method.
func (m *MockcommandRouterHandler) Execute(ctx context.Context, sender dto.User, args ...string) (tgbotapi.Chattable, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sender}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(tgbotapi.Chattable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockcommandRouterHandlerMockRecorder) Execute(ctx, sender interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sender}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockcommandRouterHandler)(nil).Execute), varargs...)
}
