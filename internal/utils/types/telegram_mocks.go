// Code generated by MockGen. DO NOT EDIT.
// Source: telegram.go

// Package types is a generated GoMock package.
package types

import (
	http "net/http"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockTelegram is a mock of Telegram interface.
type MockTelegram struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramMockRecorder
}

// MockTelegramMockRecorder is the mock recorder for MockTelegram.
type MockTelegramMockRecorder struct {
	mock *MockTelegram
}

// NewMockTelegram creates a new mock instance.
func NewMockTelegram(ctrl *gomock.Controller) *MockTelegram {
	mock := &MockTelegram{ctrl: ctrl}
	mock.recorder = &MockTelegramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegram) EXPECT() *MockTelegramMockRecorder {
	return m.recorder
}

// CopyMessage mocks base method.
func (m *MockTelegram) CopyMessage(config tgbotapi.CopyMessageConfig) (tgbotapi.MessageID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyMessage", config)
	ret0, _ := ret[0].(tgbotapi.MessageID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyMessage indicates an expected call of CopyMessage.
func (mr *MockTelegramMockRecorder) CopyMessage(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyMessage", reflect.TypeOf((*MockTelegram)(nil).CopyMessage), config)
}

// GetChat mocks base method.
func (m *MockTelegram) GetChat(config tgbotapi.ChatInfoConfig) (tgbotapi.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", config)
	ret0, _ := ret[0].(tgbotapi.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockTelegramMockRecorder) GetChat(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockTelegram)(nil).GetChat), config)
}

// GetChatAdministrators mocks base method.
func (m *MockTelegram) GetChatAdministrators(config tgbotapi.ChatAdministratorsConfig) ([]tgbotapi.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatAdministrators", config)
	ret0, _ := ret[0].([]tgbotapi.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatAdministrators indicates an expected call of GetChatAdministrators.
func (mr *MockTelegramMockRecorder) GetChatAdministrators(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatAdministrators", reflect.TypeOf((*MockTelegram)(nil).GetChatAdministrators), config)
}

// GetChatMember mocks base method.
func (m *MockTelegram) GetChatMember(config tgbotapi.GetChatMemberConfig) (tgbotapi.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", config)
	ret0, _ := ret[0].(tgbotapi.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember.
func (mr *MockTelegramMockRecorder) GetChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockTelegram)(nil).GetChatMember), config)
}

// GetChatMembersCount mocks base method.
func (m *MockTelegram) GetChatMembersCount(config tgbotapi.ChatMemberCountConfig) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMembersCount", config)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMembersCount indicates an expected call of GetChatMembersCount.
func (mr *MockTelegramMockRecorder) GetChatMembersCount(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMembersCount", reflect.TypeOf((*MockTelegram)(nil).GetChatMembersCount), config)
}

// GetFile mocks base method.
func (m *MockTelegram) GetFile(config tgbotapi.FileConfig) (tgbotapi.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", config)
	ret0, _ := ret[0].(tgbotapi.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockTelegramMockRecorder) GetFile(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockTelegram)(nil).GetFile), config)
}

// GetFileDirectURL mocks base method.
func (m *MockTelegram) GetFileDirectURL(fileID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileDirectURL", fileID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileDirectURL indicates an expected call of GetFileDirectURL.
func (mr *MockTelegramMockRecorder) GetFileDirectURL(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileDirectURL", reflect.TypeOf((*MockTelegram)(nil).GetFileDirectURL), fileID)
}

// GetGameHighScores mocks base method.
func (m *MockTelegram) GetGameHighScores(config tgbotapi.GetGameHighScoresConfig) ([]tgbotapi.GameHighScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameHighScores", config)
	ret0, _ := ret[0].([]tgbotapi.GameHighScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameHighScores indicates an expected call of GetGameHighScores.
func (mr *MockTelegramMockRecorder) GetGameHighScores(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameHighScores", reflect.TypeOf((*MockTelegram)(nil).GetGameHighScores), config)
}

// GetInviteLink mocks base method.
func (m *MockTelegram) GetInviteLink(config tgbotapi.ChatInviteLinkConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteLink", config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteLink indicates an expected call of GetInviteLink.
func (mr *MockTelegramMockRecorder) GetInviteLink(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteLink", reflect.TypeOf((*MockTelegram)(nil).GetInviteLink), config)
}

// GetMe mocks base method.
func (m *MockTelegram) GetMe() (tgbotapi.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe")
	ret0, _ := ret[0].(tgbotapi.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockTelegramMockRecorder) GetMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockTelegram)(nil).GetMe))
}

// GetMyCommands mocks base method.
func (m *MockTelegram) GetMyCommands() ([]tgbotapi.BotCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyCommands")
	ret0, _ := ret[0].([]tgbotapi.BotCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyCommands indicates an expected call of GetMyCommands.
func (mr *MockTelegramMockRecorder) GetMyCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyCommands", reflect.TypeOf((*MockTelegram)(nil).GetMyCommands))
}

// GetMyCommandsWithConfig mocks base method.
func (m *MockTelegram) GetMyCommandsWithConfig(config tgbotapi.GetMyCommandsConfig) ([]tgbotapi.BotCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyCommandsWithConfig", config)
	ret0, _ := ret[0].([]tgbotapi.BotCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyCommandsWithConfig indicates an expected call of GetMyCommandsWithConfig.
func (mr *MockTelegramMockRecorder) GetMyCommandsWithConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyCommandsWithConfig", reflect.TypeOf((*MockTelegram)(nil).GetMyCommandsWithConfig), config)
}

// GetStickerSet mocks base method.
func (m *MockTelegram) GetStickerSet(config tgbotapi.GetStickerSetConfig) (tgbotapi.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerSet", config)
	ret0, _ := ret[0].(tgbotapi.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerSet indicates an expected call of GetStickerSet.
func (mr *MockTelegramMockRecorder) GetStickerSet(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerSet", reflect.TypeOf((*MockTelegram)(nil).GetStickerSet), config)
}

// GetUpdates mocks base method.
func (m *MockTelegram) GetUpdates(config tgbotapi.UpdateConfig) ([]tgbotapi.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdates", config)
	ret0, _ := ret[0].([]tgbotapi.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdates indicates an expected call of GetUpdates.
func (mr *MockTelegramMockRecorder) GetUpdates(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdates", reflect.TypeOf((*MockTelegram)(nil).GetUpdates), config)
}

// GetUpdatesChan mocks base method.
func (m *MockTelegram) GetUpdatesChan(config tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", config)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockTelegramMockRecorder) GetUpdatesChan(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockTelegram)(nil).GetUpdatesChan), config)
}

// GetUserProfilePhotos mocks base method.
func (m *MockTelegram) GetUserProfilePhotos(config tgbotapi.UserProfilePhotosConfig) (tgbotapi.UserProfilePhotos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfilePhotos", config)
	ret0, _ := ret[0].(tgbotapi.UserProfilePhotos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfilePhotos indicates an expected call of GetUserProfilePhotos.
func (mr *MockTelegramMockRecorder) GetUserProfilePhotos(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfilePhotos", reflect.TypeOf((*MockTelegram)(nil).GetUserProfilePhotos), config)
}

// GetWebhookInfo mocks base method.
func (m *MockTelegram) GetWebhookInfo() (tgbotapi.WebhookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInfo")
	ret0, _ := ret[0].(tgbotapi.WebhookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInfo indicates an expected call of GetWebhookInfo.
func (mr *MockTelegramMockRecorder) GetWebhookInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInfo", reflect.TypeOf((*MockTelegram)(nil).GetWebhookInfo))
}

// HandleUpdate mocks base method.
func (m *MockTelegram) HandleUpdate(r *http.Request) (*tgbotapi.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdate", r)
	ret0, _ := ret[0].(*tgbotapi.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUpdate indicates an expected call of HandleUpdate.
func (mr *MockTelegramMockRecorder) HandleUpdate(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdate", reflect.TypeOf((*MockTelegram)(nil).HandleUpdate), r)
}

// IsMessageToMe mocks base method.
func (m *MockTelegram) IsMessageToMe(message tgbotapi.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMessageToMe", message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMessageToMe indicates an expected call of IsMessageToMe.
func (mr *MockTelegramMockRecorder) IsMessageToMe(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMessageToMe", reflect.TypeOf((*MockTelegram)(nil).IsMessageToMe), message)
}

// ListenForWebhook mocks base method.
func (m *MockTelegram) ListenForWebhook(pattern string) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhook", pattern)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// ListenForWebhook indicates an expected call of ListenForWebhook.
func (mr *MockTelegramMockRecorder) ListenForWebhook(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhook", reflect.TypeOf((*MockTelegram)(nil).ListenForWebhook), pattern)
}

// ListenForWebhookRespReqFormat mocks base method.
func (m *MockTelegram) ListenForWebhookRespReqFormat(w http.ResponseWriter, r *http.Request) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhookRespReqFormat", w, r)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// ListenForWebhookRespReqFormat indicates an expected call of ListenForWebhookRespReqFormat.
func (mr *MockTelegramMockRecorder) ListenForWebhookRespReqFormat(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhookRespReqFormat", reflect.TypeOf((*MockTelegram)(nil).ListenForWebhookRespReqFormat), w, r)
}

// MakeRequest mocks base method.
func (m *MockTelegram) MakeRequest(endpoint string, params tgbotapi.Params) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRequest", endpoint, params)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRequest indicates an expected call of MakeRequest.
func (mr *MockTelegramMockRecorder) MakeRequest(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockTelegram)(nil).MakeRequest), endpoint, params)
}

// Request mocks base method.
func (m *MockTelegram) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", c)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockTelegramMockRecorder) Request(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockTelegram)(nil).Request), c)
}

// Send mocks base method.
func (m *MockTelegram) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockTelegramMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegram)(nil).Send), c)
}

// SendMediaGroup mocks base method.
func (m *MockTelegram) SendMediaGroup(config tgbotapi.MediaGroupConfig) ([]tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMediaGroup", config)
	ret0, _ := ret[0].([]tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMediaGroup indicates an expected call of SendMediaGroup.
func (mr *MockTelegramMockRecorder) SendMediaGroup(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMediaGroup", reflect.TypeOf((*MockTelegram)(nil).SendMediaGroup), config)
}

// SetAPIEndpoint mocks base method.
func (m *MockTelegram) SetAPIEndpoint(apiEndpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIEndpoint", apiEndpoint)
}

// SetAPIEndpoint indicates an expected call of SetAPIEndpoint.
func (mr *MockTelegramMockRecorder) SetAPIEndpoint(apiEndpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIEndpoint", reflect.TypeOf((*MockTelegram)(nil).SetAPIEndpoint), apiEndpoint)
}

// StopPoll mocks base method.
func (m *MockTelegram) StopPoll(config tgbotapi.StopPollConfig) (tgbotapi.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPoll", config)
	ret0, _ := ret[0].(tgbotapi.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPoll indicates an expected call of StopPoll.
func (mr *MockTelegramMockRecorder) StopPoll(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPoll", reflect.TypeOf((*MockTelegram)(nil).StopPoll), config)
}

// StopReceivingUpdates mocks base method.
func (m *MockTelegram) StopReceivingUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopReceivingUpdates")
}

// StopReceivingUpdates indicates an expected call of StopReceivingUpdates.
func (mr *MockTelegramMockRecorder) StopReceivingUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceivingUpdates", reflect.TypeOf((*MockTelegram)(nil).StopReceivingUpdates))
}

// UploadFiles mocks base method.
func (m *MockTelegram) UploadFiles(endpoint string, params tgbotapi.Params, files []tgbotapi.RequestFile) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFiles", endpoint, params, files)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFiles indicates an expected call of UploadFiles.
func (mr *MockTelegramMockRecorder) UploadFiles(endpoint, params, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFiles", reflect.TypeOf((*MockTelegram)(nil).UploadFiles), endpoint, params, files)
}
