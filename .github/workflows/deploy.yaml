name: Deployment workflow

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      ref:
        type: string
        description: Branch, tag or SHA
    secrets:
      YC_SA_JSON_CREDENTIALS:
        required: true
      YA_SERVERLESS_FOLDER_ID:
        required: true
      YC_CR_ID:
        required: true
      YC_CICD_USER:
        required: true

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.target }}
    env:
      BUILD_SHA: ${{ !!inputs.ref && inputs.ref || github.sha }}
      BUILD_APP_VERSION: ${{ vars.BUILD_APP_VERSION }}
      CONTAINER_REGISTRY: ${{ secrets.YC_CR_ID }}
    outputs:
      BUILD_SHA_SHORT: ${{ steps.output_tag.outputs.BUILD_SHA_SHORT }}
      APP_NAME: ${{ steps.output_tag.outputs.APP_NAME }}
    steps:
      - name: Setup Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: Set Environment Variables
        uses: ./.github/actions/set_environment_variables
        with:
          file: ./.build/.env
          commit: ${{ env.BUILD_SHA }}
      - name: Try to install yc cli and login into yandex cloud
        uses: okar1/yc-cli-install@master
        with:
          SA_KEY: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Image exist
        id: iamge_exist
        run: |
          echo "IMAGE_IS_EXIST=$(yc container image list --registry-id ${{ secrets.YC_CR_SHORT_ID }} | grep ${{ env.BUILD_SHA_SHORT }} | wc -l)" >> $GITHUB_OUTPUT
      - run: |
          echo "Build and push with arguments:"
          echo "ðŸŽ‰ target evn : ${{ inputs.target }}"  >> log.txt
          echo "ðŸ’€ % cores : ${{ vars.YC_REVISION_CORE_FRACTION }}"  >> log.txt
          echo "ðŸ¤¬ suffix : ${{ vars.YC_APP_NAME_SUFFIX }}" >> log.txt
          echo "ref : ${{ inputs.ref }}" >> log.txt
          echo "BUILD_SHA : ${{ env.BUILD_SHA }}"  >> log.txt
          echo "BUILD_SHA_SHORT : ${{ env.BUILD_SHA_SHORT }}"  >> log.txt
          echo "APP_NAME : ${{ env.APP_NAME }}" >> log.txt
          echo "IMAGE_IS_EXIST : ${{ steps.iamge_exist.outputs.IMAGE_IS_EXIST }}"  >> log.txt
          cat log.txt | sed -n 's/ //p' | column -t -s ':' | sed -e 's/^/ /'
      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        if: ${{ steps.iamge_exist.outputs.IMAGE_IS_EXIST == 0 }}
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build and push image to Yandex Cloud Container Registry
        if: ${{ steps.iamge_exist.outputs.IMAGE_IS_EXIST == 0 }}
        run: |
          make build-docker
          make push-docker
      - name: Output tag
        id: output_tag
        run: |
          echo "BUILD_SHA_SHORT=${{env.BUILD_SHA_SHORT}}" >> $GITHUB_OUTPUT
          echo "APP_NAME=${{env.APP_NAME}}" >> $GITHUB_OUTPUT
      - name: Add specific tag
        if: ${{ inputs.target == 'Production' && !!needs.prepare.outputs.IMAGE_IS_NOT_EXIST }}
        run: |
          docker tag ${{ secrets.YC_CR_ID }}${{ env.APP_NAME }}:${{env.BUILD_SHA_SHORT}} ${{ secrets.YC_CR_ID }}${{ env.APP_NAME }}:latest
          docker push ${{ secrets.YC_CR_ID }}${{ env.APP_NAME }}:latest

  deploy:
    name: Deploy
    needs:
      - publish
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.target }}
    env:
      BUILD_SHA_SHORT: ${{ needs.publish.outputs.BUILD_SHA_SHORT }}
      APP_NAME: ${{ needs.publish.outputs.APP_NAME }}
    steps:
      - name: Deploy
        uses: yc-actions/yc-sls-container-deploy@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          container-name: ${{ env.APP_NAME }}${{ vars.YC_APP_NAME_SUFFIX }}
          folder-id: ${{ secrets.YA_SERVERLESS_FOLDER_ID }}
          revision-service-account-id: ${{ secrets.YC_CICD_USER }}
          revision-cores: ${{ vars.YC_REVISION_CORES }}
          revision-memory: ${{ vars.YC_REVISION_MEMORY }}
          revision-core-fraction: ${{ vars.YC_REVISION_CORE_FRACTION }}
          revision-concurrency: ${{ vars.YC_REVISION_CONCURRENCY }}
          revision-image-url: ${{ secrets.YC_CR_ID }}${{ env.APP_NAME }}:${{ env.BUILD_SHA_SHORT }}
          revision-secrets: APP_TELEGRAM_TOKEN=${{ secrets.YC_REVISION_SECRET_ID }}/${{ secrets.YC_REVISION_SECRET_VERSION }}/APP_TELEGRAM_TOKEN APP_POSTGRES_HOST=${{ secrets.YC_REVISION_SECRET_ID }}/${{ secrets.YC_REVISION_SECRET_VERSION }}/APP_POSTGRES_HOST APP_POSTGRES_USER=${{ secrets.YC_REVISION_SECRET_ID }}/${{ secrets.YC_REVISION_SECRET_VERSION }}/APP_POSTGRES_USER APP_POSTGRES_PASS=${{ secrets.YC_REVISION_SECRET_ID }}/${{ secrets.YC_REVISION_SECRET_VERSION }}/APP_POSTGRES_PASS
          revision-execution-timeout: 3
